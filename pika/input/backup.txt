exec {
	var a := [1, 2, 3].
	var s := "Elliot".
	
	print a; ":"; s; _n_.
	print "Length:"; length a; ":"; length s; _n_.
	print "Indices:"; a[1]; ":"; s[1]; _n_.
	
	print "Index Range:"; s[1, 6]; _n_.
}

exec {
	var s := "Elliot".

	print "Index: ", s[1], _n_.
	print "Index Range: ", s[1, 3], _n_.
	
	print "Test"[3], _n_.
	print "Test"[0,4], _n_.
}

exec {
	print "Elliot"[0, 4], _n_.

	var s := "Hello".
	var t := ", world!".
	
	print s; _n_, t; _n_.
	print s + t.
	
	var a := ^!^.
	print a + s, _n_.
	print s + a, _n_.
}

exec {
	print "Elliot", _n_.
	print reverse "Elliot", _n_.
	
	var a := [[1, 2], [3, 4]].
	print a, _n_.
	print reverse a.
}

exec {
	for index i of "rabbit" {
		print i;.
	}
	print _n_.
	
	for elem c of "rabbit" {
		print c;.
	}
	print _n_.
	
	var g := [[1//2, -2//1], [3//9, 40//2]].
	for elem e of g {
		print e;.
	}
	print _n_.
	
	for index i of "rabbit" + " hello" {
		print i;.
	}
	print _n_.
	
	for elem c of "rabbit" + " hello" {
		print c;.
	}
	print _n_.
}

exec {
	for index i of "rabbit" + " hello" {
		print i;.
	}
	print _n_.
		
	for index i of "rabbit" + " hello" {
		print ("rabbit" + " hello")[i];.
	}
	print _n_.
	
	var a := "rabbit" + "hello".
	print a, _n_.
	print a[0, 2].
}

exec {
	var numbers := [1, 3, 5, 8, 11, 12].
	
	var parityString := <int a>->string {
		if ((a/2)*2 == a) {
			return "even".
		} else {
			return "odd".
		}
	}.
	
	var mapF := <[int] arr, <int> -> string convert> -> [string] {
		var newArr := new [string](length arr).
		
		var i := 0.
		for elem e of arr {
			newArr[i] := convert(e).
			i := i + 1.
		}
		
		return newArr.
	}.
	
	#var parities := numbers map parityString.
	var parities := mapF(numbers, parityString).
		
	print parities.
}

exec {
	var numbers := [1, 5, 3, 9, 2].
	
	var max := <int x, int y> -> int {
		if (x > y) {
			return x.
		} else {
			return y.
		}
	}.
	
	var catNumber := <string s, int x> -> string {
		return s + ^ ^ + [x | char].
	}.

	var maxity := numbers fold max.
	var maxitz := numbers fold [12] max.
	var numList := numbers fold ["list:"] catNumber.
}

exec {
	var numbers := [1, 5, 3, 9, 2].
	
	var catNumber := <string s, int x> -> string {
		return s + ^ ^ + [x | char].
	}.
	
	var numList := numbers fold ["list:"] catNumber.
	print numList.
}


func asciiStringFor<int x> -> string {
	var returnString := "".
	var i := x.
	
	while (i > 10) {
		var r := i - ((i / 10) * 10).		
		returnString := returnString + [(r + 48) | char].
		i := i / 10. 
	} 
	returnString := returnString + [(i + 48) | char].
	
	return reverse returnString.
}

exec {
	var numbers := [401, 5, 3, 9, 2].
	
	var catNumber := <string s, int x> -> string {
		return s + ^ ^ + asciiStringFor(x).
	}.
	
	var numList := numbers fold ["list:"] catNumber.
	print numList.
}





